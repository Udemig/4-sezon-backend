 Learn
About
Download
Blog
Docs
Certification
Start typing...
⌘ K


Getting Started
Introduction to Node.js
How to install Node.js
How much JavaScript do you need to know to use Node.js?
Differences between Node.js and the Browser
The V8 JavaScript Engine
An introduction to the npm package manager
ECMAScript 2015 (ES6) and beyond
Node.js, the difference between development and production
Node.js with TypeScript
Node.js with WebAssembly
Debugging Node.js
Profiling Node.js Applications
Security Best Practices
Asynchronous Work
Asynchronous flow control
Overview of Blocking vs Non-Blocking
JavaScript Asynchronous Programming and Callbacks
Discover JavaScript Timers
The Node.js Event Loop
The Node.js Event Emitter
Understanding process.nextTick()
Understanding setImmediate()
Don't Block the Event Loop
Manipulating Files
Node.js file stats
Node.js File Paths
Working with file descriptors in Node.js
Reading files with Node.js
Writing files with Node.js
Working with folders in Node.js
How to work with Different Filesystems
Command Line
Run Node.js scripts from the command line
How to read environment variables from Node.js
How to use the Node.js REPL
Output to the command line using Node.js
Accept input from the command line in Node.js
Modules
How to publish a Node-API package
Anatomy of an HTTP Transaction
ABI Stability
Backpressuring in Streams
Diagnostics
User Journey
Memory
Live Debugging
Poor Performance
Flame Graphs
Node.js file stats
Every file comes with a set of details that we can inspect using Node.js. In particular, using the stat() method provided by the fs module.

You call it passing a file path, and once Node.js gets the file details it will call the callback function you pass, with 2 parameters: an error message, and the file stats:

CJS
MJS
const fs = require('node:fs');
fs.stat('/Users/joe/test.txt', (err, stats) => {
  if (err) {
    console.error(err);
  }
  // we have access to the file stats in `stats`
});
JavaScript
Copy to clipboard
Node.js also provides a sync method, which blocks the thread until the file stats are ready:

CJS
MJS
const fs = require('node:fs');
try {
  const stats = fs.statSync('/Users/joe/test.txt');
} catch (err) {
  console.error(err);
}
JavaScript
Copy to clipboard
The file information is included in the stats variable. What kind of information can we extract using the stats?

A lot, including:

if the file is a directory or a file, using stats.isFile() and stats.isDirectory()
if the file is a symbolic link using stats.isSymbolicLink()
the file size in bytes using stats.size.
There are other advanced methods, but the bulk of what you'll use in your day-to-day programming is this.

CJS
MJS
const fs = require('node:fs');
fs.stat('/Users/joe/test.txt', (err, stats) => {
  if (err) {
    console.error(err);
    return;
  }
  stats.isFile(); // true
  stats.isDirectory(); // false
  stats.isSymbolicLink(); // false
  stats.size; // 1024000 //= 1MB
});
JavaScript
Copy to clipboard
You can also use promise-based fsPromises.stat() method offered by the fs/promises module if you like:

CJS
MJS
const fs = require('node:fs/promises');
async function example() {
  try {
    const stats = await fs.stat('/Users/joe/test.txt');
    stats.isFile(); // true
    stats.isDirectory(); // false
    stats.isSymbolicLink(); // false
    stats.size; // 1024000 //= 1MB
  } catch (err) {
    console.log(err);
  }
}
example();
JavaScript
Copy to clipboard
You can read more about the fs module in the official documentation.

Prev
Don't Block the Event Loop
Next
Node.js File Paths
Reading Time
2 min read
Authors
F
Z
M
F
L
A
C
O
+1
Contribute
Edit this page
Manipulating Files
Node.js file stats
Node.js — Node.js file stats