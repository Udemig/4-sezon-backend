// GeliÅŸtirme aÅŸamasÄ±nda mongodbdeki veirleirn bozulmasÄ± sÄ±kÃ§a karÅŸÄ±laÅŸtÄ±ÄŸÄ±mÄ±z bÃ¼r durum ve bu durumda databasdeki veirleri silip json dosyasÄ±ndaki verileri tekrardan aktarmamÄ±z gerekicek bunu arayÃ¼zden yapmak uÄŸraÅŸtÄ±cÄ± olucaÄŸÄ± iÃ§in 2 fonksiyon hazÄ±rlÄ±yÄ±caz
const fs = require("fs");
const mongoose = require("mongoose");
const Tour = require("../../models/tourModel");
const User = require("../../models/userModel");

// dotenv kÃ¼tÃ¼phaneisni Ã§evre deÄŸiÅŸkenlere eirÅŸmek iÃ§in kuruyoruz
require("dotenv").config();

// mongodb veritabanÄ±na baÄŸlan
mongoose
  .connect(process.env.DATABASE_URL)
  .then(() => console.log("ðŸ¥³ VeriTabanÄ± ile baÄŸlantÄ± kuruldu ðŸ¥³"))
  .catch((err) =>
    console.log("ðŸ˜¡ VeriTabanÄ±na baÄŸlanÄ±rken hata oluÅŸtu ðŸ˜¡", err)
  );

// json dosyasÄ±ndan verileri al
const tours = JSON.parse(fs.readFileSync(`${__dirname}/tours.json`));
const users = JSON.parse(fs.readFileSync(`${__dirname}/users.json`));

// devdata klasÃ¶rÃ¼ndeki json dosylarÄ±ndan veirleri alÄ±p mongodbye aktar
const importData = async () => {
  try {
    await Tour.create(tours, { validateBeforeSave: false });
    await User.create(users, { validateBeforeSave: false });
    console.log("Json verileri kolleksiyona aktarÄ±ldÄ±");
  } catch (error) {
    console.log(error);
  }
  process.exit();
};

// mongodbdeki datlarÄ± silicek
const deleteData = async () => {
  try {
    await Tour.deleteMany();
    await User.deleteMany();
    console.log("BÃ¼tÃ¼n veriler temizlendi");
  } catch (error) {
    console.log(error);
  }
  process.exit();
};

// komutun sonuna eklenen argÃ¼mana gÃ¶re Ã§alÄ±ÅŸÄ±cak fonksiyonu belirliyoruz
if (process.argv.includes("--import")) {
  importData();
} else if (process.argv.includes("--delete")) {
  deleteData();
}
